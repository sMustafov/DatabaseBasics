 /* Problem 1. One-To-One Relationship */
 
 CREATE TABLE Passports
(
	PassportID INT PRIMARY KEY,
	PassportNumber varchar(8) NOT NULL
)

CREATE TABLE Persons
(
	PersonID INT PRIMARY KEY,
	FirstName varchar(32) NOT NULL,
	Salary FLOAT,
	PassportID INT UNIQUE
	CONSTRAINT FK_Persons_Passports
	FOREIGN KEY REFERENCES Passports(PassportID)
)

INSERT INTO Passports(PassportID, PassportNumber)
VALUES (101, 'N34FG21B'), (102, 'K65LO4R7'), (103, 'ZE657QP2')

INSERT INTO Persons(PersonID, FirstName,Salary, PassportID) 
VALUES (1, 'Roberto', 433000.00, 102), 
		(2, 'Tom', 56100.00, 103), 
		(3, 'Yana', 60200.00, 101)
		
/* Problem 2. One-To- Many Relationship */

CREATE TABLE Manufacturers
(
	ManufacturerID INT PRIMARY KEY,
	Name varchar(32) NOT NULL,
	EstablishedOn DATETIME
)

CREATE TABLE Models
(
	PersonID INT PRIMARY KEY,
	Name varchar(32) NOT NULL,
	ManufacturerID INT
	CONSTRAINT FK_Models_Manufacturers
	FOREIGN KEY REFERENCES Manufacturers(ManufacturerID)
)

/* Problem 3. Many-To- Many Relationship */

CREATE TABLE Students(
  StudentID int NOT NULL,
  Name nvarchar(50) NOT NULL,
  CONSTRAINT PK_Students PRIMARY KEY (StudentID)
)

CREATE TABLE Exams(
  ExamID int NOT NULL,
  Name nvarchar(50) NOT NULL,
  CONSTRAINT PK_Exams PRIMARY KEY (ExamID)
)

CREATE TABLE StudentsExams(
  StudentID int NOT NULL,
  ExamID int NOT NULL,
  CONSTRAINT PK_StudentsExams PRIMARY KEY (StudentID, ExamID),
  CONSTRAINT FK_StudentsExams_Students FOREIGN KEY (StudentID) REFERENCES Students(StudentID),
  CONSTRAINT FK_StudentsExams_Exams FOREIGN KEY (ExamID) REFERENCES Exams(ExamID)
)


/* Problem 4. Self-Referencing */

CREATE TABLE Teachers
(
	TeacherID INT PRIMARY KEY,
	Name varchar(32) NOT NULL,
	ManagerID INT,
	CONSTRAINT FK_Teachers_TeacherID
	FOREIGN KEY(ManagerID) 
	REFERENCES Teachers(TeacherID)
)

/* Problem 5. Online Store Database */

CREATE TABLE Cities(
  CityID int NOT NULL,
  Name varchar(50) NOT NULL,
  CONSTRAINT PK_Cities PRIMARY KEY (CityID)
)

CREATE TABLE Customers(
  CustomerID int NOT NULL,
  Name varchar(50) NOT NULL,
  Birthday date,
  CityID int,
  CONSTRAINT PK_Customers PRIMARY KEY (CustomerID),
  CONSTRAINT FK_Customers_Cities FOREIGN KEY (CityID) REFERENCES Cities(CityID)
)

CREATE TABLE Orders(
  OrderID int NOT NULL,
  CustomerID int NOT NULL,
  CONSTRAINT PK_Orders PRIMARY KEY (OrderID),
  CONSTRAINT FK_Orders_Customers FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID)
)

CREATE TABLE ItemTypes(
  ItemTypeID int NOT NULL,
  Name varchar(50) NOT NULL,
  CONSTRAINT PK_ItemTypes PRIMARY KEY (ItemTypeID)
)

CREATE TABLE Items(
  ItemID int NOT NULL,
  Name varchar(50) NOT NULL,
  ItemTypeID int NOT NULL,
  CONSTRAINT PK_Items PRIMARY KEY (ItemID),
  CONSTRAINT FK_Items_ItemTypes FOREIGN KEY (ItemTypeID) REFERENCES ItemTypes(ItemTypeID)
)

CREATE TABLE OrderItems(
  OrderID int NOT NULL,
  ItemID int NOT NULL,
  CONSTRAINT PK_OrderItems PRIMARY KEY (OrderID, ItemID),
  CONSTRAINT FK_OrderItems_Orders FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
  CONSTRAINT FK_OrderItems_Items FOREIGN KEY (ItemID) REFERENCES Items(ItemID)
)

/* Problem 6. University Database */

CREATE TABLE Majors(
  MajorID int NOT NULL,
  Name nvarchar(50) NOT NULL,
  CONSTRAINT PK_Majors PRIMARY KEY (MajorID)
)

CREATE TABLE Students(
  StudentID int NOT NULL,
  StudentNumber int NOT NULL UNIQUE,
  StudentName nvarchar(200) NOT NULL,
  MajorID int,
  CONSTRAINT PK_Students PRIMARY KEY (StudentID),
  CONSTRAINT FK_Students_Majors FOREIGN KEY (MajorID) REFERENCES Majors(MajorID)
)

CREATE TABLE Payments(
  PaymentID int NOT NULL,
  PaymentDate date NOT NULL,
  PaymentAmount money NOT NULL,
  StudentID int NOT NULL,
  CONSTRAINT PK_Payments PRIMARY KEY (PaymentID),
  CONSTRAINT FK_Payments_Students FOREIGN KEY (StudentID) REFERENCES Students(StudentID)
)

CREATE TABLE Subjects(
  SubjectID int NOT NULL,
  SubjectName nvarchar(50) NOT NULL,
  CONSTRAINT PK_Subjects PRIMARY KEY (SubjectID)
)

CREATE TABLE Agenda(
  StudentID int NOT NULL,
  SubjectID int NOT NULL,
  CONSTRAINT PK_Agenda PRIMARY KEY (StudentID, SubjectID),
  CONSTRAINT FK_Agenda_Students FOREIGN KEY (StudentID) REFERENCES Students(StudentID),
  CONSTRAINT FK_Agenda_Subjects FOREIGN KEY (SubjectID) REFERENCES Subjects(SubjectID)
)


/* Problem 9. *Peaks in Rila */

SELECT MountainRange, PeakName, Elevation FROM Peaks as p
JOIN Mountains as m
ON m.Id = p.MountainId
WHERE MountainRange = 'Rila'
ORDER BY Elevation DESC



























